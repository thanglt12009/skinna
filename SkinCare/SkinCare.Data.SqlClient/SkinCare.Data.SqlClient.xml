<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SkinCare.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:SkinCare.Data.SqlClient.SqlDonHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.DonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlDonHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlDonHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.DonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlDonHangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlDonHangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlDonHangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlDonHangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlDonHangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maDonHang">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.DonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.DonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.DonHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.DonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.GetByMaDonHang(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDonHang index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maDonHang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.DonHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.DonHang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.DonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.DonHang)">
            <summary>
            	Inserts a SkinCare.Entities.DonHang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.DonHang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.DonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.DonHang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.DonHang object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.DonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlDonHangChiTietProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.DonHangChiTiet"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlDonHangChiTietProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.DonHangChiTiet"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.DonHangChiTiet objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.DonHangChiTiet objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.DonHangChiTiet objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.DonHangChiTiet objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.GetById(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDonHangChiTiet index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.DonHangChiTiet"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.DonHangChiTiet})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.DonHangChiTiet object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.DonHangChiTiet)">
            <summary>
            	Inserts a SkinCare.Entities.DonHangChiTiet object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.DonHangChiTiet object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.DonHangChiTiet object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlDonHangChiTietProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.DonHangChiTiet)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.DonHangChiTiet object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.DonHangChiTiet object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlKhachHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.KhachHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhachHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlKhachHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.KhachHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhachHangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhachHangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maKhachHang">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhachHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.KhachHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhachHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhachHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.GetByMaKhachHang(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKhachHang index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maKhachHang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.KhachHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.KhachHang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.KhachHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.KhachHang)">
            <summary>
            	Inserts a SkinCare.Entities.KhachHang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.KhachHang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.KhachHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.KhachHang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.KhachHang object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.KhachHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhachHangProviderBase.GetLastId(SkinCare.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the '_tblKhachHang_GetLastId' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.KhoHangSanPham"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.KhoHangSanPham"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhoHangSanPham objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.KhoHangSanPham objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhoHangSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhoHangSanPham objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.GetById(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKhoHangSanPham index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.KhoHangSanPham"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.GetByMaSanPham(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ__tblKhoHa__FAC7442C3D7BD0B1 index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maSanPham"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.KhoHangSanPham"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.KhoHangSanPham})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.KhoHangSanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.KhoHangSanPham)">
            <summary>
            	Inserts a SkinCare.Entities.KhoHangSanPham object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.KhoHangSanPham object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.KhoHangSanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.KhoHangSanPham)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.KhoHangSanPham object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.KhoHangSanPham object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhoHangSanPhamProviderBase.GetSanPhamFromLastThreeMonth(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the '_tblKhoHangSanPham_GetSanPhamFromLastThreeMonth' stored procedure. 
            </summary>	
            <param name="maKhachHang"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlKhuyenMaiProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.KhuyenMai"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhuyenMaiProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.KhuyenMai"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maKhuyenMai">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhuyenMai objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.KhuyenMai objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhuyenMai objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.KhuyenMai objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.GetByMaKhuyenMai(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKhuyenMai index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maKhuyenMai"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.KhuyenMai"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.KhuyenMai})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.KhuyenMai object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.KhuyenMai)">
            <summary>
            	Inserts a SkinCare.Entities.KhuyenMai object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.KhuyenMai object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.KhuyenMai object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlKhuyenMaiProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.KhuyenMai)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.KhuyenMai object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.KhuyenMai object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.LoaiTrangThaiDonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.LoaiTrangThaiDonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maLoaiTrangThai">--------------- SAU KHI GIAO HANG -------------------------or--------------- KHOI TAO -------------------------or--------------- XU LY -------------------------. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.LoaiTrangThaiDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.LoaiTrangThaiDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.LoaiTrangThaiDonHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.LoaiTrangThaiDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.GetByMaLoaiTrangThai(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoaiTrangThaiDonHang index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maLoaiTrangThai">--------------- SAU KHI GIAO HANG -------------------------or--------------- KHOI TAO -------------------------or--------------- XU LY -------------------------</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.LoaiTrangThaiDonHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.LoaiTrangThaiDonHang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.LoaiTrangThaiDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.LoaiTrangThaiDonHang)">
            <summary>
            	Inserts a SkinCare.Entities.LoaiTrangThaiDonHang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.LoaiTrangThaiDonHang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.LoaiTrangThaiDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlLoaiTrangThaiDonHangProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.LoaiTrangThaiDonHang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.LoaiTrangThaiDonHang object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.LoaiTrangThaiDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlNguonDonHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.NguonDonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlNguonDonHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.NguonDonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maNguonDonHang">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.NguonDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.NguonDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.NguonDonHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.NguonDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.GetByMaNguonDonHang(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNguonDonHang index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maNguonDonHang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.NguonDonHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.NguonDonHang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.NguonDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.NguonDonHang)">
            <summary>
            	Inserts a SkinCare.Entities.NguonDonHang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.NguonDonHang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.NguonDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNguonDonHangProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.NguonDonHang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.NguonDonHang object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.NguonDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.PhuongThucThanhToan"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.PhuongThucThanhToan"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maPhuongThucThanhToan">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.PhuongThucThanhToan objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.PhuongThucThanhToan objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.PhuongThucThanhToan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.PhuongThucThanhToan objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.GetByMaPhuongThucThanhToan(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPhuongThucThanhToan index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maPhuongThucThanhToan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.PhuongThucThanhToan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.PhuongThucThanhToan})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.PhuongThucThanhToan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.PhuongThucThanhToan)">
            <summary>
            	Inserts a SkinCare.Entities.PhuongThucThanhToan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.PhuongThucThanhToan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.PhuongThucThanhToan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlPhuongThucThanhToanProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.PhuongThucThanhToan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.PhuongThucThanhToan object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.PhuongThucThanhToan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlTinhTrangDaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.TinhTrangDa"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlTinhTrangDaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.TinhTrangDa"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.TinhTrangDa objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.TinhTrangDa objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.TinhTrangDa objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.TinhTrangDa objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.GetById(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTinhTrangDa index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.TinhTrangDa"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.TinhTrangDa})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.TinhTrangDa object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.TinhTrangDa)">
            <summary>
            	Inserts a SkinCare.Entities.TinhTrangDa object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.TinhTrangDa object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.TinhTrangDa object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTinhTrangDaProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.TinhTrangDa)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.TinhTrangDa object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.TinhTrangDa object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.TrangThaiDonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.TrangThaiDonHang"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_maTrangThaiDonHang">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.TrangThaiDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.TrangThaiDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.TrangThaiDonHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.TrangThaiDonHang objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.GetByMaTrangThaiDonHang(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrangThaiDonHang index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_maTrangThaiDonHang"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.TrangThaiDonHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.TrangThaiDonHang})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.TrangThaiDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.TrangThaiDonHang)">
            <summary>
            	Inserts a SkinCare.Entities.TrangThaiDonHang object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.TrangThaiDonHang object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.TrangThaiDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlTrangThaiDonHangProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.TrangThaiDonHang)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.TrangThaiDonHang object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.TrangThaiDonHang object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SkinCare.Entities.User"/> entity.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.SqlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.Delete(SkinCare.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.Find(SkinCare.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SkinCare.Entities.User objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.Find(SkinCare.Data.TransactionManager,SkinCare.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SkinCare.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SkinCare.Entities.User objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.GetAll(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.GetPaged(SkinCare.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SkinCare.Entities.User objects.</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.GetByUserId(SkinCare.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SkinCare.Entities.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.BulkInsert(SkinCare.Data.TransactionManager,SkinCare.Entities.TList{SkinCare.Entities.User})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.Insert(SkinCare.Data.TransactionManager,SkinCare.Entities.User)">
            <summary>
            	Inserts a SkinCare.Entities.User object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.User object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SkinCare.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlUserProviderBase.Update(SkinCare.Data.TransactionManager,SkinCare.Entities.User)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SkinCare.Data.TransactionManager"/> object</param>
            <param name="entity">SkinCare.Entities.User object to update.</param>
            <remarks>
            	After updating the datasource, the SkinCare.Entities.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:SkinCare.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:SkinCare.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:SkinCare.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.PhuongThucThanhToanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.PhuongThucThanhToan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlPhuongThucThanhToanProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlPhuongThucThanhToanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.DonHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.DonHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlDonHangProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlDonHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.TinhTrangDaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.TinhTrangDa"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlTinhTrangDaProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlTinhTrangDaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.NguonDonHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.NguonDonHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlNguonDonHangProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlNguonDonHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.TrangThaiDonHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.TrangThaiDonHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlTrangThaiDonHangProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlTrangThaiDonHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.LoaiTrangThaiDonHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.LoaiTrangThaiDonHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlLoaiTrangThaiDonHangProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlLoaiTrangThaiDonHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.DonHangChiTietProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.DonHangChiTiet"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlDonHangChiTietProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlDonHangChiTietProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.KhuyenMaiProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.KhuyenMai"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlKhuyenMaiProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlKhuyenMaiProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.KhachHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.KhachHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlKhachHangProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlKhachHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.UserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.KhoHangSanPhamProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SkinCare.Entities.KhoHangSanPham"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlKhoHangSanPhamProvider">
            <summary>
            Gets the current <see cref="P:SkinCare.Data.SqlClient.SqlNetTiersProvider.SqlKhoHangSanPhamProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(SkinCare.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(SkinCare.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(SkinCare.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(SkinCare.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(SkinCare.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(SkinCare.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(SkinCare.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(SkinCare.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(SkinCare.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(SkinCare.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(SkinCare.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(SkinCare.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:SkinCare.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="P:SkinCare.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:SkinCare.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:SkinCare.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:SkinCare.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:SkinCare.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:SkinCare.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SkinCare.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:SkinCare.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:SkinCare.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,SkinCare.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="T:SkinCare.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="M:SkinCare.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="T:SkinCare.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:SkinCare.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:SkinCare.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:SkinCare.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
