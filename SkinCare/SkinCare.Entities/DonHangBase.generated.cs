
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file DonHang.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using SkinCare.Entities.Validation;
#endregion

namespace SkinCare.Entities
{
	///<summary>
	/// An object representation of the 'tblDonHang' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DonHangBase : EntityBase, IDonHang, IEntityId<DonHangKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DonHangEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DonHangEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DonHangEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DonHang> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DonHangEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DonHangEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DonHangBase"/> instance.
		///</summary>
		public DonHangBase()
		{
			this.entityData = new DonHangEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DonHangBase"/> instance.
		///</summary>
		///<param name="_maKhachHang"></param>
		///<param name="_maNguonDonHang"></param>
		///<param name="_maTrangThaiDonHang"></param>
		///<param name="_nguoiDatHang"></param>
		///<param name="_maPhuongThucThanhToan"></param>
		///<param name="_cachThucNhanHang"></param>
		///<param name="_phiVanChuyen"></param>
		///<param name="_tongTienDonHang"></param>
		///<param name="_ngayTaoDonHang"></param>
		///<param name="_maKhuyenMai"></param>
		///<param name="_maVoucher"></param>
		///<param name="_ghiChu"></param>
		///<param name="_tienChietKhau"></param>
		///<param name="_tiLeChietKhau"></param>
		public DonHangBase(System.Int32? _maKhachHang, System.Int32? _maNguonDonHang, System.Int32? _maTrangThaiDonHang, 
			System.String _nguoiDatHang, System.Int32? _maPhuongThucThanhToan, System.String _cachThucNhanHang, 
			System.Decimal? _phiVanChuyen, System.Decimal? _tongTienDonHang, System.DateTime? _ngayTaoDonHang, 
			System.String _maKhuyenMai, System.String _maVoucher, System.String _ghiChu, System.Decimal? _tienChietKhau, 
			System.Double? _tiLeChietKhau)
		{
			this.entityData = new DonHangEntityData();
			this.backupData = null;

			this.MaKhachHang = _maKhachHang;
			this.MaNguonDonHang = _maNguonDonHang;
			this.MaTrangThaiDonHang = _maTrangThaiDonHang;
			this.NguoiDatHang = _nguoiDatHang;
			this.MaPhuongThucThanhToan = _maPhuongThucThanhToan;
			this.CachThucNhanHang = _cachThucNhanHang;
			this.PhiVanChuyen = _phiVanChuyen;
			this.TongTienDonHang = _tongTienDonHang;
			this.NgayTaoDonHang = _ngayTaoDonHang;
			this.MaKhuyenMai = _maKhuyenMai;
			this.MaVoucher = _maVoucher;
			this.GhiChu = _ghiChu;
			this.TienChietKhau = _tienChietKhau;
			this.TiLeChietKhau = _tiLeChietKhau;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DonHang"/> instance.
		///</summary>
		///<param name="_maKhachHang"></param>
		///<param name="_maNguonDonHang"></param>
		///<param name="_maTrangThaiDonHang"></param>
		///<param name="_nguoiDatHang"></param>
		///<param name="_maPhuongThucThanhToan"></param>
		///<param name="_cachThucNhanHang"></param>
		///<param name="_phiVanChuyen"></param>
		///<param name="_tongTienDonHang"></param>
		///<param name="_ngayTaoDonHang"></param>
		///<param name="_maKhuyenMai"></param>
		///<param name="_maVoucher"></param>
		///<param name="_ghiChu"></param>
		///<param name="_tienChietKhau"></param>
		///<param name="_tiLeChietKhau"></param>
		public static DonHang CreateDonHang(System.Int32? _maKhachHang, System.Int32? _maNguonDonHang, System.Int32? _maTrangThaiDonHang, 
			System.String _nguoiDatHang, System.Int32? _maPhuongThucThanhToan, System.String _cachThucNhanHang, 
			System.Decimal? _phiVanChuyen, System.Decimal? _tongTienDonHang, System.DateTime? _ngayTaoDonHang, 
			System.String _maKhuyenMai, System.String _maVoucher, System.String _ghiChu, System.Decimal? _tienChietKhau, 
			System.Double? _tiLeChietKhau)
		{
			DonHang newDonHang = new DonHang();
			newDonHang.MaKhachHang = _maKhachHang;
			newDonHang.MaNguonDonHang = _maNguonDonHang;
			newDonHang.MaTrangThaiDonHang = _maTrangThaiDonHang;
			newDonHang.NguoiDatHang = _nguoiDatHang;
			newDonHang.MaPhuongThucThanhToan = _maPhuongThucThanhToan;
			newDonHang.CachThucNhanHang = _cachThucNhanHang;
			newDonHang.PhiVanChuyen = _phiVanChuyen;
			newDonHang.TongTienDonHang = _tongTienDonHang;
			newDonHang.NgayTaoDonHang = _ngayTaoDonHang;
			newDonHang.MaKhuyenMai = _maKhuyenMai;
			newDonHang.MaVoucher = _maVoucher;
			newDonHang.GhiChu = _ghiChu;
			newDonHang.TienChietKhau = _tienChietKhau;
			newDonHang.TiLeChietKhau = _tiLeChietKhau;
			return newDonHang;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaDonHang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 MaDonHang
		{
			get
			{
				return this.entityData.MaDonHang; 
			}
			
			set
			{
				if (this.entityData.MaDonHang == value)
					return;
				
                OnPropertyChanging("MaDonHang");                    
				OnColumnChanging(DonHangColumn.MaDonHang, this.entityData.MaDonHang);
				this.entityData.MaDonHang = value;
				this.EntityId.MaDonHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaDonHang, this.entityData.MaDonHang);
				OnPropertyChanged("MaDonHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhachHang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaKhachHang
		{
			get
			{
				return this.entityData.MaKhachHang; 
			}
			
			set
			{
				if (this.entityData.MaKhachHang == value)
					return;
				
                OnPropertyChanging("MaKhachHang");                    
				OnColumnChanging(DonHangColumn.MaKhachHang, this.entityData.MaKhachHang);
				this.entityData.MaKhachHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaKhachHang, this.entityData.MaKhachHang);
				OnPropertyChanged("MaKhachHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaNguonDonHang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaNguonDonHang
		{
			get
			{
				return this.entityData.MaNguonDonHang; 
			}
			
			set
			{
				if (this.entityData.MaNguonDonHang == value)
					return;
				
                OnPropertyChanging("MaNguonDonHang");                    
				OnColumnChanging(DonHangColumn.MaNguonDonHang, this.entityData.MaNguonDonHang);
				this.entityData.MaNguonDonHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaNguonDonHang, this.entityData.MaNguonDonHang);
				OnPropertyChanged("MaNguonDonHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaTrangThaiDonHang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaTrangThaiDonHang
		{
			get
			{
				return this.entityData.MaTrangThaiDonHang; 
			}
			
			set
			{
				if (this.entityData.MaTrangThaiDonHang == value)
					return;
				
                OnPropertyChanging("MaTrangThaiDonHang");                    
				OnColumnChanging(DonHangColumn.MaTrangThaiDonHang, this.entityData.MaTrangThaiDonHang);
				this.entityData.MaTrangThaiDonHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaTrangThaiDonHang, this.entityData.MaTrangThaiDonHang);
				OnPropertyChanged("MaTrangThaiDonHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NguoiDatHang property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String NguoiDatHang
		{
			get
			{
				return this.entityData.NguoiDatHang; 
			}
			
			set
			{
				if (this.entityData.NguoiDatHang == value)
					return;
				
                OnPropertyChanging("NguoiDatHang");                    
				OnColumnChanging(DonHangColumn.NguoiDatHang, this.entityData.NguoiDatHang);
				this.entityData.NguoiDatHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.NguoiDatHang, this.entityData.NguoiDatHang);
				OnPropertyChanged("NguoiDatHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhuongThucThanhToan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaPhuongThucThanhToan
		{
			get
			{
				return this.entityData.MaPhuongThucThanhToan; 
			}
			
			set
			{
				if (this.entityData.MaPhuongThucThanhToan == value)
					return;
				
                OnPropertyChanging("MaPhuongThucThanhToan");                    
				OnColumnChanging(DonHangColumn.MaPhuongThucThanhToan, this.entityData.MaPhuongThucThanhToan);
				this.entityData.MaPhuongThucThanhToan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaPhuongThucThanhToan, this.entityData.MaPhuongThucThanhToan);
				OnPropertyChanged("MaPhuongThucThanhToan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CachThucNhanHang property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CachThucNhanHang
		{
			get
			{
				return this.entityData.CachThucNhanHang; 
			}
			
			set
			{
				if (this.entityData.CachThucNhanHang == value)
					return;
				
                OnPropertyChanging("CachThucNhanHang");                    
				OnColumnChanging(DonHangColumn.CachThucNhanHang, this.entityData.CachThucNhanHang);
				this.entityData.CachThucNhanHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.CachThucNhanHang, this.entityData.CachThucNhanHang);
				OnPropertyChanged("CachThucNhanHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhiVanChuyen property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PhiVanChuyen
		{
			get
			{
				return this.entityData.PhiVanChuyen; 
			}
			
			set
			{
				if (this.entityData.PhiVanChuyen == value)
					return;
				
                OnPropertyChanging("PhiVanChuyen");                    
				OnColumnChanging(DonHangColumn.PhiVanChuyen, this.entityData.PhiVanChuyen);
				this.entityData.PhiVanChuyen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.PhiVanChuyen, this.entityData.PhiVanChuyen);
				OnPropertyChanged("PhiVanChuyen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TongTienDonHang property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TongTienDonHang
		{
			get
			{
				return this.entityData.TongTienDonHang; 
			}
			
			set
			{
				if (this.entityData.TongTienDonHang == value)
					return;
				
                OnPropertyChanging("TongTienDonHang");                    
				OnColumnChanging(DonHangColumn.TongTienDonHang, this.entityData.TongTienDonHang);
				this.entityData.TongTienDonHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.TongTienDonHang, this.entityData.TongTienDonHang);
				OnPropertyChanged("TongTienDonHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgayTaoDonHang property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NgayTaoDonHang
		{
			get
			{
				return this.entityData.NgayTaoDonHang; 
			}
			
			set
			{
				if (this.entityData.NgayTaoDonHang == value)
					return;
				
                OnPropertyChanging("NgayTaoDonHang");                    
				OnColumnChanging(DonHangColumn.NgayTaoDonHang, this.entityData.NgayTaoDonHang);
				this.entityData.NgayTaoDonHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.NgayTaoDonHang, this.entityData.NgayTaoDonHang);
				OnPropertyChanged("NgayTaoDonHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhuyenMai property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MaKhuyenMai
		{
			get
			{
				return this.entityData.MaKhuyenMai; 
			}
			
			set
			{
				if (this.entityData.MaKhuyenMai == value)
					return;
				
                OnPropertyChanging("MaKhuyenMai");                    
				OnColumnChanging(DonHangColumn.MaKhuyenMai, this.entityData.MaKhuyenMai);
				this.entityData.MaKhuyenMai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaKhuyenMai, this.entityData.MaKhuyenMai);
				OnPropertyChanged("MaKhuyenMai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaVoucher property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MaVoucher
		{
			get
			{
				return this.entityData.MaVoucher; 
			}
			
			set
			{
				if (this.entityData.MaVoucher == value)
					return;
				
                OnPropertyChanging("MaVoucher");                    
				OnColumnChanging(DonHangColumn.MaVoucher, this.entityData.MaVoucher);
				this.entityData.MaVoucher = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.MaVoucher, this.entityData.MaVoucher);
				OnPropertyChanged("MaVoucher");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GhiChu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String GhiChu
		{
			get
			{
				return this.entityData.GhiChu; 
			}
			
			set
			{
				if (this.entityData.GhiChu == value)
					return;
				
                OnPropertyChanging("GhiChu");                    
				OnColumnChanging(DonHangColumn.GhiChu, this.entityData.GhiChu);
				this.entityData.GhiChu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.GhiChu, this.entityData.GhiChu);
				OnPropertyChanged("GhiChu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TienChietKhau property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TienChietKhau
		{
			get
			{
				return this.entityData.TienChietKhau; 
			}
			
			set
			{
				if (this.entityData.TienChietKhau == value)
					return;
				
                OnPropertyChanging("TienChietKhau");                    
				OnColumnChanging(DonHangColumn.TienChietKhau, this.entityData.TienChietKhau);
				this.entityData.TienChietKhau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.TienChietKhau, this.entityData.TienChietKhau);
				OnPropertyChanged("TienChietKhau");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TiLeChietKhau property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? TiLeChietKhau
		{
			get
			{
				return this.entityData.TiLeChietKhau; 
			}
			
			set
			{
				if (this.entityData.TiLeChietKhau == value)
					return;
				
                OnPropertyChanging("TiLeChietKhau");                    
				OnColumnChanging(DonHangColumn.TiLeChietKhau, this.entityData.TiLeChietKhau);
				this.entityData.TiLeChietKhau = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DonHangColumn.TiLeChietKhau, this.entityData.TiLeChietKhau);
				OnPropertyChanged("TiLeChietKhau");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NguoiDatHang", "Nguoi Dat Hang", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CachThucNhanHang", "Cach Thuc Nhan Hang", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaKhuyenMai", "Ma Khuyen Mai", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MaVoucher", "Ma Voucher", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblDonHang"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaDonHang", "MaKhachHang", "MaNguonDonHang", "MaTrangThaiDonHang", "NguoiDatHang", "MaPhuongThucThanhToan", "CachThucNhanHang", "PhiVanChuyen", "TongTienDonHang", "NgayTaoDonHang", "MaKhuyenMai", "MaVoucher", "GhiChu", "TienChietKhau", "TiLeChietKhau"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DonHangEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DonHang) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DonHang>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DonHang);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DonHang Entity 
		///</summary>
		protected virtual DonHang Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DonHang copy = new DonHang();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MaDonHang = this.MaDonHang;
				copy.MaKhachHang = this.MaKhachHang;
				copy.MaNguonDonHang = this.MaNguonDonHang;
				copy.MaTrangThaiDonHang = this.MaTrangThaiDonHang;
				copy.NguoiDatHang = this.NguoiDatHang;
				copy.MaPhuongThucThanhToan = this.MaPhuongThucThanhToan;
				copy.CachThucNhanHang = this.CachThucNhanHang;
				copy.PhiVanChuyen = this.PhiVanChuyen;
				copy.TongTienDonHang = this.TongTienDonHang;
				copy.NgayTaoDonHang = this.NgayTaoDonHang;
				copy.MaKhuyenMai = this.MaKhuyenMai;
				copy.MaVoucher = this.MaVoucher;
				copy.GhiChu = this.GhiChu;
				copy.TienChietKhau = this.TienChietKhau;
				copy.TiLeChietKhau = this.TiLeChietKhau;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DonHang Entity 
		///</summary>
		public virtual DonHang Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DonHang Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DonHang DeepCopy()
		{
			return EntityHelper.Clone<DonHang>(this as DonHang);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DonHangEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DonHangEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DonHangEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DonHangColumn column)
		{
			switch(column)
			{
					case DonHangColumn.MaDonHang:
					return entityData.MaDonHang != _originalData.MaDonHang;
					case DonHangColumn.MaKhachHang:
					return entityData.MaKhachHang != _originalData.MaKhachHang;
					case DonHangColumn.MaNguonDonHang:
					return entityData.MaNguonDonHang != _originalData.MaNguonDonHang;
					case DonHangColumn.MaTrangThaiDonHang:
					return entityData.MaTrangThaiDonHang != _originalData.MaTrangThaiDonHang;
					case DonHangColumn.NguoiDatHang:
					return entityData.NguoiDatHang != _originalData.NguoiDatHang;
					case DonHangColumn.MaPhuongThucThanhToan:
					return entityData.MaPhuongThucThanhToan != _originalData.MaPhuongThucThanhToan;
					case DonHangColumn.CachThucNhanHang:
					return entityData.CachThucNhanHang != _originalData.CachThucNhanHang;
					case DonHangColumn.PhiVanChuyen:
					return entityData.PhiVanChuyen != _originalData.PhiVanChuyen;
					case DonHangColumn.TongTienDonHang:
					return entityData.TongTienDonHang != _originalData.TongTienDonHang;
					case DonHangColumn.NgayTaoDonHang:
					return entityData.NgayTaoDonHang != _originalData.NgayTaoDonHang;
					case DonHangColumn.MaKhuyenMai:
					return entityData.MaKhuyenMai != _originalData.MaKhuyenMai;
					case DonHangColumn.MaVoucher:
					return entityData.MaVoucher != _originalData.MaVoucher;
					case DonHangColumn.GhiChu:
					return entityData.GhiChu != _originalData.GhiChu;
					case DonHangColumn.TienChietKhau:
					return entityData.TienChietKhau != _originalData.TienChietKhau;
					case DonHangColumn.TiLeChietKhau:
					return entityData.TiLeChietKhau != _originalData.TiLeChietKhau;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DonHangColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaDonHang != _originalData.MaDonHang;
			result = result || entityData.MaKhachHang != _originalData.MaKhachHang;
			result = result || entityData.MaNguonDonHang != _originalData.MaNguonDonHang;
			result = result || entityData.MaTrangThaiDonHang != _originalData.MaTrangThaiDonHang;
			result = result || entityData.NguoiDatHang != _originalData.NguoiDatHang;
			result = result || entityData.MaPhuongThucThanhToan != _originalData.MaPhuongThucThanhToan;
			result = result || entityData.CachThucNhanHang != _originalData.CachThucNhanHang;
			result = result || entityData.PhiVanChuyen != _originalData.PhiVanChuyen;
			result = result || entityData.TongTienDonHang != _originalData.TongTienDonHang;
			result = result || entityData.NgayTaoDonHang != _originalData.NgayTaoDonHang;
			result = result || entityData.MaKhuyenMai != _originalData.MaKhuyenMai;
			result = result || entityData.MaVoucher != _originalData.MaVoucher;
			result = result || entityData.GhiChu != _originalData.GhiChu;
			result = result || entityData.TienChietKhau != _originalData.TienChietKhau;
			result = result || entityData.TiLeChietKhau != _originalData.TiLeChietKhau;
			return result;
		}	
		
		///<summary>
		///  Returns a DonHang Entity with the original data.
		///</summary>
		public DonHang GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDonHang(
				_originalData.MaKhachHang,
				_originalData.MaNguonDonHang,
				_originalData.MaTrangThaiDonHang,
				_originalData.NguoiDatHang,
				_originalData.MaPhuongThucThanhToan,
				_originalData.CachThucNhanHang,
				_originalData.PhiVanChuyen,
				_originalData.TongTienDonHang,
				_originalData.NgayTaoDonHang,
				_originalData.MaKhuyenMai,
				_originalData.MaVoucher,
				_originalData.GhiChu,
				_originalData.TienChietKhau,
				_originalData.TiLeChietKhau
				);
				
			return (DonHang)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DonHangBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DonHangBase)
				return ValueEquals(this, (DonHangBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DonHangBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaDonHang.GetHashCode() ^ 
					((this.MaKhachHang == null) ? string.Empty : this.MaKhachHang.ToString()).GetHashCode() ^ 
					((this.MaNguonDonHang == null) ? string.Empty : this.MaNguonDonHang.ToString()).GetHashCode() ^ 
					((this.MaTrangThaiDonHang == null) ? string.Empty : this.MaTrangThaiDonHang.ToString()).GetHashCode() ^ 
					((this.NguoiDatHang == null) ? string.Empty : this.NguoiDatHang.ToString()).GetHashCode() ^ 
					((this.MaPhuongThucThanhToan == null) ? string.Empty : this.MaPhuongThucThanhToan.ToString()).GetHashCode() ^ 
					((this.CachThucNhanHang == null) ? string.Empty : this.CachThucNhanHang.ToString()).GetHashCode() ^ 
					((this.PhiVanChuyen == null) ? string.Empty : this.PhiVanChuyen.ToString()).GetHashCode() ^ 
					((this.TongTienDonHang == null) ? string.Empty : this.TongTienDonHang.ToString()).GetHashCode() ^ 
					((this.NgayTaoDonHang == null) ? string.Empty : this.NgayTaoDonHang.ToString()).GetHashCode() ^ 
					((this.MaKhuyenMai == null) ? string.Empty : this.MaKhuyenMai.ToString()).GetHashCode() ^ 
					((this.MaVoucher == null) ? string.Empty : this.MaVoucher.ToString()).GetHashCode() ^ 
					((this.GhiChu == null) ? string.Empty : this.GhiChu.ToString()).GetHashCode() ^ 
					((this.TienChietKhau == null) ? string.Empty : this.TienChietKhau.ToString()).GetHashCode() ^ 
					((this.TiLeChietKhau == null) ? string.Empty : this.TiLeChietKhau.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DonHangBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DonHangBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DonHangBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DonHangBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DonHangBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DonHangBase Object1, DonHangBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaDonHang != Object2.MaDonHang)
				equal = false;
			if ( Object1.MaKhachHang != null && Object2.MaKhachHang != null )
			{
				if (Object1.MaKhachHang != Object2.MaKhachHang)
					equal = false;
			}
			else if (Object1.MaKhachHang == null ^ Object2.MaKhachHang == null )
			{
				equal = false;
			}
			if ( Object1.MaNguonDonHang != null && Object2.MaNguonDonHang != null )
			{
				if (Object1.MaNguonDonHang != Object2.MaNguonDonHang)
					equal = false;
			}
			else if (Object1.MaNguonDonHang == null ^ Object2.MaNguonDonHang == null )
			{
				equal = false;
			}
			if ( Object1.MaTrangThaiDonHang != null && Object2.MaTrangThaiDonHang != null )
			{
				if (Object1.MaTrangThaiDonHang != Object2.MaTrangThaiDonHang)
					equal = false;
			}
			else if (Object1.MaTrangThaiDonHang == null ^ Object2.MaTrangThaiDonHang == null )
			{
				equal = false;
			}
			if ( Object1.NguoiDatHang != null && Object2.NguoiDatHang != null )
			{
				if (Object1.NguoiDatHang != Object2.NguoiDatHang)
					equal = false;
			}
			else if (Object1.NguoiDatHang == null ^ Object2.NguoiDatHang == null )
			{
				equal = false;
			}
			if ( Object1.MaPhuongThucThanhToan != null && Object2.MaPhuongThucThanhToan != null )
			{
				if (Object1.MaPhuongThucThanhToan != Object2.MaPhuongThucThanhToan)
					equal = false;
			}
			else if (Object1.MaPhuongThucThanhToan == null ^ Object2.MaPhuongThucThanhToan == null )
			{
				equal = false;
			}
			if ( Object1.CachThucNhanHang != null && Object2.CachThucNhanHang != null )
			{
				if (Object1.CachThucNhanHang != Object2.CachThucNhanHang)
					equal = false;
			}
			else if (Object1.CachThucNhanHang == null ^ Object2.CachThucNhanHang == null )
			{
				equal = false;
			}
			if ( Object1.PhiVanChuyen != null && Object2.PhiVanChuyen != null )
			{
				if (Object1.PhiVanChuyen != Object2.PhiVanChuyen)
					equal = false;
			}
			else if (Object1.PhiVanChuyen == null ^ Object2.PhiVanChuyen == null )
			{
				equal = false;
			}
			if ( Object1.TongTienDonHang != null && Object2.TongTienDonHang != null )
			{
				if (Object1.TongTienDonHang != Object2.TongTienDonHang)
					equal = false;
			}
			else if (Object1.TongTienDonHang == null ^ Object2.TongTienDonHang == null )
			{
				equal = false;
			}
			if ( Object1.NgayTaoDonHang != null && Object2.NgayTaoDonHang != null )
			{
				if (Object1.NgayTaoDonHang != Object2.NgayTaoDonHang)
					equal = false;
			}
			else if (Object1.NgayTaoDonHang == null ^ Object2.NgayTaoDonHang == null )
			{
				equal = false;
			}
			if ( Object1.MaKhuyenMai != null && Object2.MaKhuyenMai != null )
			{
				if (Object1.MaKhuyenMai != Object2.MaKhuyenMai)
					equal = false;
			}
			else if (Object1.MaKhuyenMai == null ^ Object2.MaKhuyenMai == null )
			{
				equal = false;
			}
			if ( Object1.MaVoucher != null && Object2.MaVoucher != null )
			{
				if (Object1.MaVoucher != Object2.MaVoucher)
					equal = false;
			}
			else if (Object1.MaVoucher == null ^ Object2.MaVoucher == null )
			{
				equal = false;
			}
			if ( Object1.GhiChu != null && Object2.GhiChu != null )
			{
				if (Object1.GhiChu != Object2.GhiChu)
					equal = false;
			}
			else if (Object1.GhiChu == null ^ Object2.GhiChu == null )
			{
				equal = false;
			}
			if ( Object1.TienChietKhau != null && Object2.TienChietKhau != null )
			{
				if (Object1.TienChietKhau != Object2.TienChietKhau)
					equal = false;
			}
			else if (Object1.TienChietKhau == null ^ Object2.TienChietKhau == null )
			{
				equal = false;
			}
			if ( Object1.TiLeChietKhau != null && Object2.TiLeChietKhau != null )
			{
				if (Object1.TiLeChietKhau != Object2.TiLeChietKhau)
					equal = false;
			}
			else if (Object1.TiLeChietKhau == null ^ Object2.TiLeChietKhau == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DonHangBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DonHangComparer GetComparer()
        {
            return new DonHangComparer();
        }
        */

        // Comparer delegates back to DonHang
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DonHang rhs, DonHangColumn which)
        {
            switch (which)
            {
            	
            	
            	case DonHangColumn.MaDonHang:
            		return this.MaDonHang.CompareTo(rhs.MaDonHang);
            		
            		                 
            	
            	
            	case DonHangColumn.MaKhachHang:
            		return this.MaKhachHang.Value.CompareTo(rhs.MaKhachHang.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.MaNguonDonHang:
            		return this.MaNguonDonHang.Value.CompareTo(rhs.MaNguonDonHang.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.MaTrangThaiDonHang:
            		return this.MaTrangThaiDonHang.Value.CompareTo(rhs.MaTrangThaiDonHang.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.NguoiDatHang:
            		return this.NguoiDatHang.CompareTo(rhs.NguoiDatHang);
            		
            		                 
            	
            	
            	case DonHangColumn.MaPhuongThucThanhToan:
            		return this.MaPhuongThucThanhToan.Value.CompareTo(rhs.MaPhuongThucThanhToan.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.CachThucNhanHang:
            		return this.CachThucNhanHang.CompareTo(rhs.CachThucNhanHang);
            		
            		                 
            	
            	
            	case DonHangColumn.PhiVanChuyen:
            		return this.PhiVanChuyen.Value.CompareTo(rhs.PhiVanChuyen.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.TongTienDonHang:
            		return this.TongTienDonHang.Value.CompareTo(rhs.TongTienDonHang.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.NgayTaoDonHang:
            		return this.NgayTaoDonHang.Value.CompareTo(rhs.NgayTaoDonHang.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.MaKhuyenMai:
            		return this.MaKhuyenMai.CompareTo(rhs.MaKhuyenMai);
            		
            		                 
            	
            	
            	case DonHangColumn.MaVoucher:
            		return this.MaVoucher.CompareTo(rhs.MaVoucher);
            		
            		                 
            	
            	
            	case DonHangColumn.GhiChu:
            		return this.GhiChu.CompareTo(rhs.GhiChu);
            		
            		                 
            	
            	
            	case DonHangColumn.TienChietKhau:
            		return this.TienChietKhau.Value.CompareTo(rhs.TienChietKhau.Value);
            		
            		                 
            	
            	
            	case DonHangColumn.TiLeChietKhau:
            		return this.TiLeChietKhau.Value.CompareTo(rhs.TiLeChietKhau.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DonHangKey> Members
		
		// member variable for the EntityId property
		private DonHangKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DonHangKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DonHangKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DonHang")
					.Append("|").Append( this.MaDonHang.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- MaDonHang: {0}{15}- MaKhachHang: {1}{15}- MaNguonDonHang: {2}{15}- MaTrangThaiDonHang: {3}{15}- NguoiDatHang: {4}{15}- MaPhuongThucThanhToan: {5}{15}- CachThucNhanHang: {6}{15}- PhiVanChuyen: {7}{15}- TongTienDonHang: {8}{15}- NgayTaoDonHang: {9}{15}- MaKhuyenMai: {10}{15}- MaVoucher: {11}{15}- GhiChu: {12}{15}- TienChietKhau: {13}{15}- TiLeChietKhau: {14}{15}{17}", 
				this.MaDonHang,
				(this.MaKhachHang == null) ? string.Empty : this.MaKhachHang.ToString(),
				(this.MaNguonDonHang == null) ? string.Empty : this.MaNguonDonHang.ToString(),
				(this.MaTrangThaiDonHang == null) ? string.Empty : this.MaTrangThaiDonHang.ToString(),
				(this.NguoiDatHang == null) ? string.Empty : this.NguoiDatHang.ToString(),
				(this.MaPhuongThucThanhToan == null) ? string.Empty : this.MaPhuongThucThanhToan.ToString(),
				(this.CachThucNhanHang == null) ? string.Empty : this.CachThucNhanHang.ToString(),
				(this.PhiVanChuyen == null) ? string.Empty : this.PhiVanChuyen.ToString(),
				(this.TongTienDonHang == null) ? string.Empty : this.TongTienDonHang.ToString(),
				(this.NgayTaoDonHang == null) ? string.Empty : this.NgayTaoDonHang.ToString(),
				(this.MaKhuyenMai == null) ? string.Empty : this.MaKhuyenMai.ToString(),
				(this.MaVoucher == null) ? string.Empty : this.MaVoucher.ToString(),
				(this.GhiChu == null) ? string.Empty : this.GhiChu.ToString(),
				(this.TienChietKhau == null) ? string.Empty : this.TienChietKhau.ToString(),
				(this.TiLeChietKhau == null) ? string.Empty : this.TiLeChietKhau.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblDonHang' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DonHangEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MaDonHang : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblDonHang"</remarks>
		public System.Int32 MaDonHang;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaKhachHang : 
		/// </summary>
		public System.Int32? MaKhachHang = null;
		
		/// <summary>
		/// MaNguonDonHang : 
		/// </summary>
		public System.Int32? MaNguonDonHang = null;
		
		/// <summary>
		/// MaTrangThaiDonHang : 
		/// </summary>
		public System.Int32? MaTrangThaiDonHang = null;
		
		/// <summary>
		/// NguoiDatHang : 
		/// </summary>
		public System.String NguoiDatHang = null;
		
		/// <summary>
		/// MaPhuongThucThanhToan : 
		/// </summary>
		public System.Int32? MaPhuongThucThanhToan = null;
		
		/// <summary>
		/// CachThucNhanHang : 
		/// </summary>
		public System.String CachThucNhanHang = null;
		
		/// <summary>
		/// PhiVanChuyen : 
		/// </summary>
		public System.Decimal? PhiVanChuyen = null;
		
		/// <summary>
		/// TongTienDonHang : 
		/// </summary>
		public System.Decimal? TongTienDonHang = null;
		
		/// <summary>
		/// NgayTaoDonHang : 
		/// </summary>
		public System.DateTime? NgayTaoDonHang = null;
		
		/// <summary>
		/// MaKhuyenMai : 
		/// </summary>
		public System.String MaKhuyenMai = null;
		
		/// <summary>
		/// MaVoucher : 
		/// </summary>
		public System.String MaVoucher = null;
		
		/// <summary>
		/// GhiChu : 
		/// </summary>
		public System.String GhiChu = null;
		
		/// <summary>
		/// TienChietKhau : 
		/// </summary>
		public System.Decimal? TienChietKhau = null;
		
		/// <summary>
		/// TiLeChietKhau : 
		/// </summary>
		public System.Double? TiLeChietKhau = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DonHangEntityData _tmp = new DonHangEntityData();
						
			_tmp.MaDonHang = this.MaDonHang;
			
			_tmp.MaKhachHang = this.MaKhachHang;
			_tmp.MaNguonDonHang = this.MaNguonDonHang;
			_tmp.MaTrangThaiDonHang = this.MaTrangThaiDonHang;
			_tmp.NguoiDatHang = this.NguoiDatHang;
			_tmp.MaPhuongThucThanhToan = this.MaPhuongThucThanhToan;
			_tmp.CachThucNhanHang = this.CachThucNhanHang;
			_tmp.PhiVanChuyen = this.PhiVanChuyen;
			_tmp.TongTienDonHang = this.TongTienDonHang;
			_tmp.NgayTaoDonHang = this.NgayTaoDonHang;
			_tmp.MaKhuyenMai = this.MaKhuyenMai;
			_tmp.MaVoucher = this.MaVoucher;
			_tmp.GhiChu = this.GhiChu;
			_tmp.TienChietKhau = this.TienChietKhau;
			_tmp.TiLeChietKhau = this.TiLeChietKhau;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DonHangEntityData _tmp = new DonHangEntityData();
						
			_tmp.MaDonHang = this.MaDonHang;
			
			_tmp.MaKhachHang = this.MaKhachHang;
			_tmp.MaNguonDonHang = this.MaNguonDonHang;
			_tmp.MaTrangThaiDonHang = this.MaTrangThaiDonHang;
			_tmp.NguoiDatHang = this.NguoiDatHang;
			_tmp.MaPhuongThucThanhToan = this.MaPhuongThucThanhToan;
			_tmp.CachThucNhanHang = this.CachThucNhanHang;
			_tmp.PhiVanChuyen = this.PhiVanChuyen;
			_tmp.TongTienDonHang = this.TongTienDonHang;
			_tmp.NgayTaoDonHang = this.NgayTaoDonHang;
			_tmp.MaKhuyenMai = this.MaKhuyenMai;
			_tmp.MaVoucher = this.MaVoucher;
			_tmp.GhiChu = this.GhiChu;
			_tmp.TienChietKhau = this.TienChietKhau;
			_tmp.TiLeChietKhau = this.TiLeChietKhau;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonHangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DonHangColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonHangColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DonHangColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonHangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DonHangColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				DonHangEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DonHangEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DonHangColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DonHangColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DonHangEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DonHangEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DonHangEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DonHang"/> object.
	/// </remarks>
	public class DonHangEventArgs : System.EventArgs
	{
		private DonHangColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DonHangEventArgs class.
		///</summary>
		public DonHangEventArgs(DonHangColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DonHangEventArgs class.
		///</summary>
		public DonHangEventArgs(DonHangColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DonHangColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DonHangColumn" />
		public DonHangColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DonHang related events.
	///</summary>
	public delegate void DonHangEventHandler(object sender, DonHangEventArgs e);
	
	#region DonHangComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DonHangComparer : System.Collections.Generic.IComparer<DonHang>
	{
		DonHangColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DonHangComparer"/> class.
        /// </summary>
		public DonHangComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DonHangComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DonHangComparer(DonHangColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="DonHang"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="DonHang"/> to compare.</param>
        /// <param name="b">The second <c>DonHang</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DonHang a, DonHang b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DonHang entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DonHang a, DonHang b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DonHangColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DonHangKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DonHang"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DonHangKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DonHangKey class.
		/// </summary>
		public DonHangKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DonHangKey class.
		/// </summary>
		public DonHangKey(DonHangBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaDonHang = entity.MaDonHang;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DonHangKey class.
		/// </summary>
		public DonHangKey(System.Int32 _maDonHang)
		{
			#region Init Properties

			this.MaDonHang = _maDonHang;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DonHangBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DonHangBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaDonHang property
		private System.Int32 _maDonHang;
		
		/// <summary>
		/// Gets or sets the MaDonHang property.
		/// </summary>
		public System.Int32 MaDonHang
		{
			get { return _maDonHang; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaDonHang = value;
				
				_maDonHang = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaDonHang = ( values["MaDonHang"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MaDonHang"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaDonHang", MaDonHang);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaDonHang: {0}{1}",
								MaDonHang,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DonHangColumn Enum
	
	/// <summary>
	/// Enumerate the DonHang columns.
	/// </summary>
	[Serializable]
	public enum DonHangColumn : int
	{
		/// <summary>
		/// MaDonHang : 
		/// </summary>
		[EnumTextValue("Ma Don Hang")]
		[ColumnEnum("MaDonHang", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		MaDonHang = 1,
		/// <summary>
		/// MaKhachHang : 
		/// </summary>
		[EnumTextValue("Ma Khach Hang")]
		[ColumnEnum("MaKhachHang", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaKhachHang = 2,
		/// <summary>
		/// MaNguonDonHang : 
		/// </summary>
		[EnumTextValue("Ma Nguon Don Hang")]
		[ColumnEnum("MaNguonDonHang", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaNguonDonHang = 3,
		/// <summary>
		/// MaTrangThaiDonHang : 
		/// </summary>
		[EnumTextValue("Ma Trang Thai Don Hang")]
		[ColumnEnum("MaTrangThaiDonHang", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaTrangThaiDonHang = 4,
		/// <summary>
		/// NguoiDatHang : 
		/// </summary>
		[EnumTextValue("Nguoi Dat Hang")]
		[ColumnEnum("NguoiDatHang", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		NguoiDatHang = 5,
		/// <summary>
		/// MaPhuongThucThanhToan : 
		/// </summary>
		[EnumTextValue("Ma Phuong Thuc Thanh Toan")]
		[ColumnEnum("MaPhuongThucThanhToan", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaPhuongThucThanhToan = 6,
		/// <summary>
		/// CachThucNhanHang : 
		/// </summary>
		[EnumTextValue("Cach Thuc Nhan Hang")]
		[ColumnEnum("CachThucNhanHang", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		CachThucNhanHang = 7,
		/// <summary>
		/// PhiVanChuyen : 
		/// </summary>
		[EnumTextValue("Phi Van Chuyen")]
		[ColumnEnum("PhiVanChuyen", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PhiVanChuyen = 8,
		/// <summary>
		/// TongTienDonHang : 
		/// </summary>
		[EnumTextValue("Tong Tien Don Hang")]
		[ColumnEnum("TongTienDonHang", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TongTienDonHang = 9,
		/// <summary>
		/// NgayTaoDonHang : 
		/// </summary>
		[EnumTextValue("Ngay Tao Don Hang")]
		[ColumnEnum("NgayTaoDonHang", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		NgayTaoDonHang = 10,
		/// <summary>
		/// MaKhuyenMai : 
		/// </summary>
		[EnumTextValue("Ma Khuyen Mai")]
		[ColumnEnum("MaKhuyenMai", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MaKhuyenMai = 11,
		/// <summary>
		/// MaVoucher : 
		/// </summary>
		[EnumTextValue("Ma Voucher")]
		[ColumnEnum("MaVoucher", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MaVoucher = 12,
		/// <summary>
		/// GhiChu : 
		/// </summary>
		[EnumTextValue("Ghi Chu")]
		[ColumnEnum("GhiChu", typeof(System.String), System.Data.DbType.String, false, false, true)]
		GhiChu = 13,
		/// <summary>
		/// TienChietKhau : 
		/// </summary>
		[EnumTextValue("Tien Chiet Khau")]
		[ColumnEnum("TienChietKhau", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TienChietKhau = 14,
		/// <summary>
		/// TiLeChietKhau : 
		/// </summary>
		[EnumTextValue("Ti Le Chiet Khau")]
		[ColumnEnum("TiLeChietKhau", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		TiLeChietKhau = 15
	}//End enum

	#endregion DonHangColumn Enum

} // end namespace
