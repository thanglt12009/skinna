
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file LieuTrinh.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using SkinCare.Entities.Validation;
#endregion

namespace SkinCare.Entities
{
	///<summary>
	/// An object representation of the 'tblLieuTrinh' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class LieuTrinhBase : EntityBase, ILieuTrinh, IEntityId<LieuTrinhKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private LieuTrinhEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private LieuTrinhEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private LieuTrinhEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<LieuTrinh> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LieuTrinhEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LieuTrinhEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="LieuTrinhBase"/> instance.
		///</summary>
		public LieuTrinhBase()
		{
			this.entityData = new LieuTrinhEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="LieuTrinhBase"/> instance.
		///</summary>
		///<param name="_maKhachHang"></param>
		///<param name="_ngay"></param>
		///<param name="_tayTrangToi"></param>
		///<param name="_ruaMat"></param>
		///<param name="_toner"></param>
		///<param name="_serum"></param>
		///<param name="_kem"></param>
		///<param name="_sanPhamKhac"></param>
		public LieuTrinhBase(System.Int32? _maKhachHang, System.DateTime? _ngay, System.String _tayTrangToi, 
			System.String _ruaMat, System.String _toner, System.String _serum, System.String _kem, 
			System.String _sanPhamKhac)
		{
			this.entityData = new LieuTrinhEntityData();
			this.backupData = null;

			this.MaKhachHang = _maKhachHang;
			this.Ngay = _ngay;
			this.TayTrangToi = _tayTrangToi;
			this.RuaMat = _ruaMat;
			this.Toner = _toner;
			this.Serum = _serum;
			this.Kem = _kem;
			this.SanPhamKhac = _sanPhamKhac;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="LieuTrinh"/> instance.
		///</summary>
		///<param name="_maKhachHang"></param>
		///<param name="_ngay"></param>
		///<param name="_tayTrangToi"></param>
		///<param name="_ruaMat"></param>
		///<param name="_toner"></param>
		///<param name="_serum"></param>
		///<param name="_kem"></param>
		///<param name="_sanPhamKhac"></param>
		public static LieuTrinh CreateLieuTrinh(System.Int32? _maKhachHang, System.DateTime? _ngay, System.String _tayTrangToi, 
			System.String _ruaMat, System.String _toner, System.String _serum, System.String _kem, 
			System.String _sanPhamKhac)
		{
			LieuTrinh newLieuTrinh = new LieuTrinh();
			newLieuTrinh.MaKhachHang = _maKhachHang;
			newLieuTrinh.Ngay = _ngay;
			newLieuTrinh.TayTrangToi = _tayTrangToi;
			newLieuTrinh.RuaMat = _ruaMat;
			newLieuTrinh.Toner = _toner;
			newLieuTrinh.Serum = _serum;
			newLieuTrinh.Kem = _kem;
			newLieuTrinh.SanPhamKhac = _sanPhamKhac;
			return newLieuTrinh;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(LieuTrinhColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaKhachHang property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaKhachHang
		{
			get
			{
				return this.entityData.MaKhachHang; 
			}
			
			set
			{
				if (this.entityData.MaKhachHang == value)
					return;
				
                OnPropertyChanging("MaKhachHang");                    
				OnColumnChanging(LieuTrinhColumn.MaKhachHang, this.entityData.MaKhachHang);
				this.entityData.MaKhachHang = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.MaKhachHang, this.entityData.MaKhachHang);
				OnPropertyChanged("MaKhachHang");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ngay property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Ngay
		{
			get
			{
				return this.entityData.Ngay; 
			}
			
			set
			{
				if (this.entityData.Ngay == value)
					return;
				
                OnPropertyChanging("Ngay");                    
				OnColumnChanging(LieuTrinhColumn.Ngay, this.entityData.Ngay);
				this.entityData.Ngay = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.Ngay, this.entityData.Ngay);
				OnPropertyChanged("Ngay");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TayTrangToi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TayTrangToi
		{
			get
			{
				return this.entityData.TayTrangToi; 
			}
			
			set
			{
				if (this.entityData.TayTrangToi == value)
					return;
				
                OnPropertyChanging("TayTrangToi");                    
				OnColumnChanging(LieuTrinhColumn.TayTrangToi, this.entityData.TayTrangToi);
				this.entityData.TayTrangToi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.TayTrangToi, this.entityData.TayTrangToi);
				OnPropertyChanged("TayTrangToi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RuaMat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RuaMat
		{
			get
			{
				return this.entityData.RuaMat; 
			}
			
			set
			{
				if (this.entityData.RuaMat == value)
					return;
				
                OnPropertyChanging("RuaMat");                    
				OnColumnChanging(LieuTrinhColumn.RuaMat, this.entityData.RuaMat);
				this.entityData.RuaMat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.RuaMat, this.entityData.RuaMat);
				OnPropertyChanged("RuaMat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Toner property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Toner
		{
			get
			{
				return this.entityData.Toner; 
			}
			
			set
			{
				if (this.entityData.Toner == value)
					return;
				
                OnPropertyChanging("Toner");                    
				OnColumnChanging(LieuTrinhColumn.Toner, this.entityData.Toner);
				this.entityData.Toner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.Toner, this.entityData.Toner);
				OnPropertyChanged("Toner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Serum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Serum
		{
			get
			{
				return this.entityData.Serum; 
			}
			
			set
			{
				if (this.entityData.Serum == value)
					return;
				
                OnPropertyChanging("Serum");                    
				OnColumnChanging(LieuTrinhColumn.Serum, this.entityData.Serum);
				this.entityData.Serum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.Serum, this.entityData.Serum);
				OnPropertyChanged("Serum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Kem property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Kem
		{
			get
			{
				return this.entityData.Kem; 
			}
			
			set
			{
				if (this.entityData.Kem == value)
					return;
				
                OnPropertyChanging("Kem");                    
				OnColumnChanging(LieuTrinhColumn.Kem, this.entityData.Kem);
				this.entityData.Kem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.Kem, this.entityData.Kem);
				OnPropertyChanged("Kem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SanPhamKhac property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SanPhamKhac
		{
			get
			{
				return this.entityData.SanPhamKhac; 
			}
			
			set
			{
				if (this.entityData.SanPhamKhac == value)
					return;
				
                OnPropertyChanging("SanPhamKhac");                    
				OnColumnChanging(LieuTrinhColumn.SanPhamKhac, this.entityData.SanPhamKhac);
				this.entityData.SanPhamKhac = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LieuTrinhColumn.SanPhamKhac, this.entityData.SanPhamKhac);
				OnPropertyChanged("SanPhamKhac");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TayTrangToi", "Tay Trang Toi", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RuaMat", "Rua Mat", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Toner", "Toner", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Serum", "Serum", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Kem", "Kem", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SanPhamKhac", "San Pham Khac", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblLieuTrinh"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "MaKhachHang", "Ngay", "TayTrangToi", "RuaMat", "Toner", "Serum", "Kem", "SanPhamKhac"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as LieuTrinhEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (LieuTrinh) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<LieuTrinh>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as LieuTrinh);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed LieuTrinh Entity 
		///</summary>
		protected virtual LieuTrinh Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			LieuTrinh copy = new LieuTrinh();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MaKhachHang = this.MaKhachHang;
				copy.Ngay = this.Ngay;
				copy.TayTrangToi = this.TayTrangToi;
				copy.RuaMat = this.RuaMat;
				copy.Toner = this.Toner;
				copy.Serum = this.Serum;
				copy.Kem = this.Kem;
				copy.SanPhamKhac = this.SanPhamKhac;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed LieuTrinh Entity 
		///</summary>
		public virtual LieuTrinh Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed LieuTrinh Entity which is a deep copy of the current entity.
		///</summary>
		public virtual LieuTrinh DeepCopy()
		{
			return EntityHelper.Clone<LieuTrinh>(this as LieuTrinh);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as LieuTrinhEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new LieuTrinhEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as LieuTrinhEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(LieuTrinhColumn column)
		{
			switch(column)
			{
					case LieuTrinhColumn.Id:
					return entityData.Id != _originalData.Id;
					case LieuTrinhColumn.MaKhachHang:
					return entityData.MaKhachHang != _originalData.MaKhachHang;
					case LieuTrinhColumn.Ngay:
					return entityData.Ngay != _originalData.Ngay;
					case LieuTrinhColumn.TayTrangToi:
					return entityData.TayTrangToi != _originalData.TayTrangToi;
					case LieuTrinhColumn.RuaMat:
					return entityData.RuaMat != _originalData.RuaMat;
					case LieuTrinhColumn.Toner:
					return entityData.Toner != _originalData.Toner;
					case LieuTrinhColumn.Serum:
					return entityData.Serum != _originalData.Serum;
					case LieuTrinhColumn.Kem:
					return entityData.Kem != _originalData.Kem;
					case LieuTrinhColumn.SanPhamKhac:
					return entityData.SanPhamKhac != _originalData.SanPhamKhac;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< LieuTrinhColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MaKhachHang != _originalData.MaKhachHang;
			result = result || entityData.Ngay != _originalData.Ngay;
			result = result || entityData.TayTrangToi != _originalData.TayTrangToi;
			result = result || entityData.RuaMat != _originalData.RuaMat;
			result = result || entityData.Toner != _originalData.Toner;
			result = result || entityData.Serum != _originalData.Serum;
			result = result || entityData.Kem != _originalData.Kem;
			result = result || entityData.SanPhamKhac != _originalData.SanPhamKhac;
			return result;
		}	
		
		///<summary>
		///  Returns a LieuTrinh Entity with the original data.
		///</summary>
		public LieuTrinh GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateLieuTrinh(
				_originalData.MaKhachHang,
				_originalData.Ngay,
				_originalData.TayTrangToi,
				_originalData.RuaMat,
				_originalData.Toner,
				_originalData.Serum,
				_originalData.Kem,
				_originalData.SanPhamKhac
				);
				
			return (LieuTrinh)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="LieuTrinhBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is LieuTrinhBase)
				return ValueEquals(this, (LieuTrinhBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="LieuTrinhBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.MaKhachHang == null) ? string.Empty : this.MaKhachHang.ToString()).GetHashCode() ^ 
					((this.Ngay == null) ? string.Empty : this.Ngay.ToString()).GetHashCode() ^ 
					((this.TayTrangToi == null) ? string.Empty : this.TayTrangToi.ToString()).GetHashCode() ^ 
					((this.RuaMat == null) ? string.Empty : this.RuaMat.ToString()).GetHashCode() ^ 
					((this.Toner == null) ? string.Empty : this.Toner.ToString()).GetHashCode() ^ 
					((this.Serum == null) ? string.Empty : this.Serum.ToString()).GetHashCode() ^ 
					((this.Kem == null) ? string.Empty : this.Kem.ToString()).GetHashCode() ^ 
					((this.SanPhamKhac == null) ? string.Empty : this.SanPhamKhac.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="LieuTrinhBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(LieuTrinhBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="LieuTrinhBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="LieuTrinhBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="LieuTrinhBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(LieuTrinhBase Object1, LieuTrinhBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.MaKhachHang != null && Object2.MaKhachHang != null )
			{
				if (Object1.MaKhachHang != Object2.MaKhachHang)
					equal = false;
			}
			else if (Object1.MaKhachHang == null ^ Object2.MaKhachHang == null )
			{
				equal = false;
			}
			if ( Object1.Ngay != null && Object2.Ngay != null )
			{
				if (Object1.Ngay != Object2.Ngay)
					equal = false;
			}
			else if (Object1.Ngay == null ^ Object2.Ngay == null )
			{
				equal = false;
			}
			if ( Object1.TayTrangToi != null && Object2.TayTrangToi != null )
			{
				if (Object1.TayTrangToi != Object2.TayTrangToi)
					equal = false;
			}
			else if (Object1.TayTrangToi == null ^ Object2.TayTrangToi == null )
			{
				equal = false;
			}
			if ( Object1.RuaMat != null && Object2.RuaMat != null )
			{
				if (Object1.RuaMat != Object2.RuaMat)
					equal = false;
			}
			else if (Object1.RuaMat == null ^ Object2.RuaMat == null )
			{
				equal = false;
			}
			if ( Object1.Toner != null && Object2.Toner != null )
			{
				if (Object1.Toner != Object2.Toner)
					equal = false;
			}
			else if (Object1.Toner == null ^ Object2.Toner == null )
			{
				equal = false;
			}
			if ( Object1.Serum != null && Object2.Serum != null )
			{
				if (Object1.Serum != Object2.Serum)
					equal = false;
			}
			else if (Object1.Serum == null ^ Object2.Serum == null )
			{
				equal = false;
			}
			if ( Object1.Kem != null && Object2.Kem != null )
			{
				if (Object1.Kem != Object2.Kem)
					equal = false;
			}
			else if (Object1.Kem == null ^ Object2.Kem == null )
			{
				equal = false;
			}
			if ( Object1.SanPhamKhac != null && Object2.SanPhamKhac != null )
			{
				if (Object1.SanPhamKhac != Object2.SanPhamKhac)
					equal = false;
			}
			else if (Object1.SanPhamKhac == null ^ Object2.SanPhamKhac == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((LieuTrinhBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static LieuTrinhComparer GetComparer()
        {
            return new LieuTrinhComparer();
        }
        */

        // Comparer delegates back to LieuTrinh
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(LieuTrinh rhs, LieuTrinhColumn which)
        {
            switch (which)
            {
            	
            	
            	case LieuTrinhColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.MaKhachHang:
            		return this.MaKhachHang.Value.CompareTo(rhs.MaKhachHang.Value);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.Ngay:
            		return this.Ngay.Value.CompareTo(rhs.Ngay.Value);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.TayTrangToi:
            		return this.TayTrangToi.CompareTo(rhs.TayTrangToi);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.RuaMat:
            		return this.RuaMat.CompareTo(rhs.RuaMat);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.Toner:
            		return this.Toner.CompareTo(rhs.Toner);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.Serum:
            		return this.Serum.CompareTo(rhs.Serum);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.Kem:
            		return this.Kem.CompareTo(rhs.Kem);
            		
            		                 
            	
            	
            	case LieuTrinhColumn.SanPhamKhac:
            		return this.SanPhamKhac.CompareTo(rhs.SanPhamKhac);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<LieuTrinhKey> Members
		
		// member variable for the EntityId property
		private LieuTrinhKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual LieuTrinhKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new LieuTrinhKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("LieuTrinh")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- Id: {0}{9}- MaKhachHang: {1}{9}- Ngay: {2}{9}- TayTrangToi: {3}{9}- RuaMat: {4}{9}- Toner: {5}{9}- Serum: {6}{9}- Kem: {7}{9}- SanPhamKhac: {8}{9}{11}", 
				this.Id,
				(this.MaKhachHang == null) ? string.Empty : this.MaKhachHang.ToString(),
				(this.Ngay == null) ? string.Empty : this.Ngay.ToString(),
				(this.TayTrangToi == null) ? string.Empty : this.TayTrangToi.ToString(),
				(this.RuaMat == null) ? string.Empty : this.RuaMat.ToString(),
				(this.Toner == null) ? string.Empty : this.Toner.ToString(),
				(this.Serum == null) ? string.Empty : this.Serum.ToString(),
				(this.Kem == null) ? string.Empty : this.Kem.ToString(),
				(this.SanPhamKhac == null) ? string.Empty : this.SanPhamKhac.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblLieuTrinh' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class LieuTrinhEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblLieuTrinh"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// MaKhachHang : 
		/// </summary>
		public System.Int32? MaKhachHang = null;
		
		/// <summary>
		/// Ngay : 
		/// </summary>
		public System.DateTime? Ngay = null;
		
		/// <summary>
		/// TayTrangToi : 
		/// </summary>
		public System.String TayTrangToi = null;
		
		/// <summary>
		/// RuaMat : 
		/// </summary>
		public System.String RuaMat = null;
		
		/// <summary>
		/// Toner : 
		/// </summary>
		public System.String Toner = null;
		
		/// <summary>
		/// Serum : 
		/// </summary>
		public System.String Serum = null;
		
		/// <summary>
		/// Kem : 
		/// </summary>
		public System.String Kem = null;
		
		/// <summary>
		/// SanPhamKhac : 
		/// </summary>
		public System.String SanPhamKhac = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			LieuTrinhEntityData _tmp = new LieuTrinhEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaKhachHang = this.MaKhachHang;
			_tmp.Ngay = this.Ngay;
			_tmp.TayTrangToi = this.TayTrangToi;
			_tmp.RuaMat = this.RuaMat;
			_tmp.Toner = this.Toner;
			_tmp.Serum = this.Serum;
			_tmp.Kem = this.Kem;
			_tmp.SanPhamKhac = this.SanPhamKhac;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			LieuTrinhEntityData _tmp = new LieuTrinhEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MaKhachHang = this.MaKhachHang;
			_tmp.Ngay = this.Ngay;
			_tmp.TayTrangToi = this.TayTrangToi;
			_tmp.RuaMat = this.RuaMat;
			_tmp.Toner = this.Toner;
			_tmp.Serum = this.Serum;
			_tmp.Kem = this.Kem;
			_tmp.SanPhamKhac = this.SanPhamKhac;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LieuTrinhColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(LieuTrinhColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LieuTrinhColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(LieuTrinhColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LieuTrinhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(LieuTrinhColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				LieuTrinhEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new LieuTrinhEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LieuTrinhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(LieuTrinhColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				LieuTrinhEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new LieuTrinhEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region LieuTrinhEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="LieuTrinh"/> object.
	/// </remarks>
	public class LieuTrinhEventArgs : System.EventArgs
	{
		private LieuTrinhColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the LieuTrinhEventArgs class.
		///</summary>
		public LieuTrinhEventArgs(LieuTrinhColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the LieuTrinhEventArgs class.
		///</summary>
		public LieuTrinhEventArgs(LieuTrinhColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The LieuTrinhColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="LieuTrinhColumn" />
		public LieuTrinhColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all LieuTrinh related events.
	///</summary>
	public delegate void LieuTrinhEventHandler(object sender, LieuTrinhEventArgs e);
	
	#region LieuTrinhComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class LieuTrinhComparer : System.Collections.Generic.IComparer<LieuTrinh>
	{
		LieuTrinhColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:LieuTrinhComparer"/> class.
        /// </summary>
		public LieuTrinhComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LieuTrinhComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public LieuTrinhComparer(LieuTrinhColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="LieuTrinh"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="LieuTrinh"/> to compare.</param>
        /// <param name="b">The second <c>LieuTrinh</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(LieuTrinh a, LieuTrinh b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(LieuTrinh entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(LieuTrinh a, LieuTrinh b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public LieuTrinhColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region LieuTrinhKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="LieuTrinh"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class LieuTrinhKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the LieuTrinhKey class.
		/// </summary>
		public LieuTrinhKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the LieuTrinhKey class.
		/// </summary>
		public LieuTrinhKey(LieuTrinhBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the LieuTrinhKey class.
		/// </summary>
		public LieuTrinhKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private LieuTrinhBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public LieuTrinhBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region LieuTrinhColumn Enum
	
	/// <summary>
	/// Enumerate the LieuTrinh columns.
	/// </summary>
	[Serializable]
	public enum LieuTrinhColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// MaKhachHang : 
		/// </summary>
		[EnumTextValue("Ma Khach Hang")]
		[ColumnEnum("MaKhachHang", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaKhachHang = 2,
		/// <summary>
		/// Ngay : 
		/// </summary>
		[EnumTextValue("Ngay")]
		[ColumnEnum("Ngay", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Ngay = 3,
		/// <summary>
		/// TayTrangToi : 
		/// </summary>
		[EnumTextValue("Tay Trang Toi")]
		[ColumnEnum("TayTrangToi", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TayTrangToi = 4,
		/// <summary>
		/// RuaMat : 
		/// </summary>
		[EnumTextValue("Rua Mat")]
		[ColumnEnum("RuaMat", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		RuaMat = 5,
		/// <summary>
		/// Toner : 
		/// </summary>
		[EnumTextValue("Toner")]
		[ColumnEnum("Toner", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Toner = 6,
		/// <summary>
		/// Serum : 
		/// </summary>
		[EnumTextValue("Serum")]
		[ColumnEnum("Serum", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Serum = 7,
		/// <summary>
		/// Kem : 
		/// </summary>
		[EnumTextValue("Kem")]
		[ColumnEnum("Kem", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Kem = 8,
		/// <summary>
		/// SanPhamKhac : 
		/// </summary>
		[EnumTextValue("San Pham Khac")]
		[ColumnEnum("SanPhamKhac", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		SanPhamKhac = 9
	}//End enum

	#endregion LieuTrinhColumn Enum

} // end namespace
